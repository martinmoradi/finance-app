services:
  # PostgreSQL Database Service
  postgres:
    container_name: postgres
    image: postgres:17.2-alpine # Using Alpine-based image for smaller footprint
    restart: unless-stopped # Ensures container restarts on failure
    ports:
      - '5432:5432' # Expose PostgreSQL default port
    environment:
      POSTGRES_USER: postgres # Database superuser
      POSTGRES_PASSWORD: postgres # WARNING: Change in production
      POSTGRES_DB: finance_app # Initial database name
    volumes:
      - postgres_data:/var/lib/postgresql/data # Persist database data
    networks:
      - app_network
    healthcheck: # Ensure database is ready for connections
      test: ['CMD', 'pg_isready', '-U', 'postgres']
      interval: 5s
      timeout: 5s
      retries: 5

  # Backend API Service
  api:
    container_name: api
    build:
      context: . # Build from repository root
      dockerfile: ./apps/api/Dockerfile
    restart: unless-stopped
    ports:
      - '3001:3001' # Expose API port
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/finance_app
      - PORT=3001
    depends_on:
      - postgres # Ensure database is started first
    networks:
      - app_network

  # Frontend Web Service
  web:
    container_name: web
    build:
      context: .
      dockerfile: ./apps/web/Dockerfile
    restart: unless-stopped
    ports:
      - '3000:3000' # Expose frontend port
    environment:
      - NODE_ENV=production
      - API_URL=http://api:3001 # Internal DNS resolution via Docker network
    depends_on:
      - api # Ensure API is started first
    networks:
      - app_network

# Named volumes for persistent data storage
volumes:
  postgres_data:
    name: finance_app_postgres_data

# Docker network configuration
networks:
  app_network:
    driver: bridge # Standard bridge network for container communication
