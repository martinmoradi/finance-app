services:
  # PostgreSQL Database Service
  postgres:
    container_name: postgres_dev
    image: postgres:17.2-alpine # Using Alpine-based image for smaller footprint
    restart: unless-stopped # Ensures container restarts on failure
    ports:
      - '5432:5432' # Expose PostgreSQL default port
    environment:
      POSTGRES_USER: postgres # Database superuser
      POSTGRES_PASSWORD: postgres # WARNING: Change in production
      POSTGRES_DB: finance_app_dev # Development database name
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data # Persist database data
    networks:
      - app_network_dev
    healthcheck: # Ensure database is ready for connections
      test: ['CMD', 'pg_isready', '-U', 'postgres']
      interval: 5s
      timeout: 5s
      retries: 5

  postgres_test:
    container_name: postgres_test
    image: postgres:17.2-alpine # Using Alpine-based image for smaller footprint
    restart: unless-stopped # Ensures container restarts on failure
    ports:
      - '5433:5432' # Expose PostgreSQL default port
    environment:
      POSTGRES_USER: postgres # Database superuser
      POSTGRES_PASSWORD: postgres # WARNING: Change in production
      POSTGRES_DB: finance_app_test # Development database name
    volumes:
      - postgres_test_data:/var/lib/postgresql/data # Persist database data
    networks:
      - app_network_dev
    healthcheck: # Ensure database is ready for connections
      test: ['CMD', 'pg_isready', '-U', 'postgres']
      interval: 5s
      timeout: 5s
      retries: 5

  # pgAdmin Database Management Interface
  pgadmin:
    container_name: pgadmin_dev
    image: dpage/pgadmin4 # Web-based PostgreSQL admin tool
    restart: unless-stopped
    ports:
      - '5050:80' # Access pgAdmin at http://localhost:5050
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com # Default admin login
      PGADMIN_DEFAULT_PASSWORD: admin # WARNING: Change in production
    networks:
      - app_network_dev
    depends_on:
      - postgres # Ensure database is started first

  # NestJS Backend API Service
  api:
    container_name: api_dev
    build:
      context: . # Build from repository root
      dockerfile: ./apps/api/Dockerfile.dev
    restart: unless-stopped
    ports:
      - '3001:3001' # Main API port
      - '9229:9229' # Node.js debug port
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://postgres:postgres@postgres_dev:5432/finance_app_dev
      - PORT=3001
      - DEBUG=true # Enable debug logging
      - CHOKIDAR_USEPOLLING=true # Enable file watching in Docker
      - WATCHPACK_POLLING=true # Enable webpack file watching
    volumes:
      - .:/app # Mount entire project for development
      - /app/node_modules # Prevent mounting host node_modules
      - /app/apps/api/node_modules # Prevent mounting host API node_modules
      - /app/packages/eslint-config/node_modules # Prevent mounting shared package node_modules
      - /app/packages/typescript-config/node_modules
    command: >
      nodemon
        --watch apps/api/src
        --ext ts,js
        --delay 2500
        --legacy-watch
        --signal SIGTERM
        --exec "pnpm dev --filter api"
    depends_on:
      postgres:
        condition: service_healthy # Wait for database to be ready
    networks:
      - app_network_dev

  # Next.js Frontend Web Application
  web:
    container_name: web_dev
    build:
      context: .
      dockerfile: ./apps/web/Dockerfile.dev
    restart: unless-stopped
    ports:
      - '3000:3000' # Access frontend at http://localhost:3000
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://localhost:3001 # API URL for client-side requests
      - API_URL=http://api_dev:3001 # API URL for server-side requests (internal network)
      - NEXT_WEBPACK_USEPOLLING=1 # Enable webpack hot reload in Docker
    volumes:
      - .:/app # Mount entire project for development
      - /app/node_modules # Prevent mounting host node_modules
      - /app/apps/web/node_modules # Prevent mounting host web node_modules
      - /app/apps/web/.next # Prevent mounting Next.js build cache
      - /app/packages/eslint-config/node_modules # Prevent mounting shared package node_modules
      - /app/packages/typescript-config/node_modules
    command: pnpm dev --filter web # Start Next.js dev server
    depends_on:
      - api # Ensure API is started first
    networks:
      - app_network_dev

# Docker Volumes Configuration
volumes:
  postgres_dev_data:
    name: finance_app_postgres_dev_data # Named volume for database persistence
  postgres_test_data:
    name: finance_app_postgres_test_data

# Docker Network Configuration
networks:
  app_network_dev:
    driver: bridge # Standard bridge network for container communication
    name: finance_app_dev_network # Custom network name for development
